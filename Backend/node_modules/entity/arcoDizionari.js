/*
 *    Date: 2018 11 20
 * Project: Nodas - EntityManager
 *
 * Copyright 2018 SIT srl
 */

var entTemp = require(process.cwd()+"/../lib/entityTemplate").entityTemplate;
var async = require("async");
var util = require("util");
var self = {};

var arcoDizionari = function()
{
  arcoDizionari.super_.call(this);

  this.moduleName = "Entity arcoDizionari";
  this.entityName = "arcoDizionari";
  this.schemaName = "grafo";

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;
}

/*
 * Inheritance
 */
util.inherits(arcoDizionari,entTemp);

arcoDizionari.prototype.init = function(opt)
{
  self = this;
  arcoDizionari.super_.prototype.init.call(self,opt);
}

arcoDizionari.prototype.count = function(opt,callback)
{
  this.tableName = opt.object.dict;

  if (!this.tableName)
  {
    callback({message:"NULL dict param"},null);
    return;
  }

  arcoDizionari.super_.prototype.count.call(self,opt,callback);
}

arcoDizionari.prototype.master = function(opt,callback)
{
  this.tableName = opt.object.dict;

  if (this.tableName)
    arcoDizionari.super_.prototype.master.call(self,opt,callback);
  else
    allMaster(callback);
}

arcoDizionari.prototype.detail = function(opt,callback)
{
  this.tableName = opt.object.dict;

  if (!this.tableName)
  {
    callback({message:"NULL dict param"},null);
    return;
  }

  arcoDizionari.super_.prototype.detail.call(self,opt,callback);
}

arcoDizionari.prototype.insert = function(opt,callback)
{
  this.tableName = opt.query.dict;

  if (!this.tableName)
  {
    callback({message:"NULL dict param"},null);
    return;
  }

  arcoDizionari.super_.prototype.insert.call(self,opt,callback);
}

arcoDizionari.prototype.update = function(opt,callback)
{
  this.tableName = opt.query.dict;

  if (!this.tableName)
  {
    callback({message:"NULL dict param"},null);
    return;
  }

  arcoDizionari.super_.prototype.update.call(self,opt,callback);
}

arcoDizionari.prototype.bulkInsert = function(opt,callback)
{
  callback({message:"Not implemeted"},null);
}

arcoDizionari.prototype.delete = function(opt,callback)
{
  this.tableName = opt.object.dict;

  if (!this.tableName)
  {
    callback({message:"NULL dict param"},null);
    return;
  }

  arcoDizionari.super_.prototype.delete.call(self,opt,callback);
}

arcoDizionari.prototype.logicDelete = function(opt,callback)
{
  callback({message:"Not implemeted"},null);
}

/*
 * Export
 */
exports.arcoDizionari = arcoDizionari;

/*
 * Private function
 */
function allMaster(callback)
{
  var retObj = {result: {}};
  var aDict = [
    "arco_uso",
    "arco_tipo",
    "arco_sede",
    "arco_fondo",
    "arco_fonte",
    "arco_classe",
    "arco_marcia",
    "arco_livello",
    "arco_origine",
    "arco_portata",
    "arco_sezione",
    "arco_proprieta",
    "arco_tipologia",
    "arco_viabilita",
    "arco_strada_cs",
    "arco_stato_cons",
    "arco_class_funz",
    "arco_fondazione",
    "arco_carreggiata",
    "arco_funzionalita",
    "arco_pavimentazione",
    "arco_stato_esercizio",
    "arco_senso_percorrenza",
    "arco_mot_ridenominazione"
  ];

  /* Exec query */
  async.eachLimit(aDict,1,function(dict,cb)
  {
    var qOpt = {
      fields: self.crudUtils.ALL_FIELDS,
      from: [{schema:"grafo",name:dict,type: self.crudUtils.TABLE}],
      ordering: [{field:"name",orderType:self.crudUtils.ASC}]
    };

    self.crud.select(qOpt,[],function(err,res)
    {
      if (res && res.result)
        retObj.result[dict] = res.result;

      cb(err);
    });
  },
  function(err)
  {
    callback(err,err ? null : retObj);
  });
}
