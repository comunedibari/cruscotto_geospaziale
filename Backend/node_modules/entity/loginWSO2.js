/*
 *    Date: 2020 01 28
 *  Author: 
 * Project: Nodas - EntityManager
 *
 * Copyright 2020 SIT srl
 */

var entTemp = require(process.cwd()+"/../lib/entityTemplate").entityTemplate;
var util = require("util");
var self = {};

var loginWSO2 = function()
{
  loginWSO2.super_.call(this);

  this.moduleName = "Entity loginWSO2";
  this.entityName = "loginWSO2";
  this.tableName  = "sysuser";

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;
}

/*
 * Inheritance
 */
util.inherits(loginWSO2,entTemp);

loginWSO2.prototype.init = function(opt)
{
  self = this;
  loginWSO2.super_.prototype.init.call(self,opt);
}

/*
 * Reimplemented functions
 */

/*
 * New methods
 */
loginWSO2.prototype.checkUniqueWSO2 = function(params, callback)
{
  // in this case checkUniqueWSO2 method is invoked with empty string or
  // without wso2_username param. Return count = 0
  if (!params.object.wso2_username || params.object.wso2_username == "")
    return callback(null, {count:0});

  var qOpt = {
    fields:[{name:self.entityId, operator:self.crudUtils.COUNT}],
    from:[{type:self.crudUtils.TABLE, name:self.tableName}],
    where:[{
        typeCond: self.crudUtils.SIMPLE_COND,
        leftSide: "wso2_username",
        operator: self.crudUtils.EQ,
        rightSide: "$1",
    }]
  };

  // Exec query
  self.crud.aggregate(qOpt,[{value:params.object.wso2_username}],function(err,res)
  {
    if (err)
      self.log.error(self.moduleName + " - Error on chek wso2_username uniqueness: " + err.message);

    callback(err,res);
  });
}

loginWSO2.prototype.check = function(params, callback)
{
  var req = params.req;

  var wso2Username = req.headers["x-userinfo-sub"];

  if(wso2Username)
  {
    self.log.info(self.moduleName + " - there are  WSO2 headers in the request; proceed with custom authentication");

    // retrieve user related to given wso2Username
    var qOpt = {
      fields:[{name:"signature"}],
      from:[{type:self.crudUtils.TABLE, name:self.tableName}],
      where:[{
         typeCond: self.crudUtils.SIMPLE_COND,
         leftSide: "wso2_username",
         operator: self.crudUtils.EQ,
         rightSide: "$1",
      }]
    };

    // Exec query
    self.crud.select(qOpt,[{value:wso2Username}],function(err,res)
    {
      if (err)
      {
        self.log.error(self.moduleName + " - Error on retrieve user related to given wso2Username: " + err.message);
        callback({message:"ERROR"},null);
      }
      else
      {
        // in this case wso2Username isn't present on sysuser table (field wso2_username)
        if (res.result && res.result.length == 0)
        {
          self.log.info(self.moduleName + " User " + wso2Username + " not defined on Cruscotto Geospaziale");
          return callback(null,{message:"WSO2_USER_NOT_DEFINED"});
        }

        // execute login
        var loginEnt = self.entityHolder.getEntity("login");

        var opt = {
          sysuser_id: params.sysuser_id,
          object:{signature:res.result[0].signature}
        };

        loginEnt.doLoginNew(opt, function(errl,resl)
        {
          if (errl)
          {
            self.log.error(self.moduleName + " - Error on execute login : " + errl.message);
            return callback({message:"LOGIN_ERROR"},null);
          }

          callback(null,resl);
        });
      }
    });
  }
  else
  {
    self.log.info(self.moduleName + " - there are no WSO2 headers in the request!");
    callback(null,{message:"NO_WSO2_HEADERS"});
  }
}

loginWSO2.prototype.doLogout = function(params, callback)
{
  var req = params.req;

  var cookies = req.headers.cookie;
  var founded = false;

  if(cookies)
  {
    var rawCookies = cookies.split('; ');

    // cycle cookies to find wso2 cookies
    for (var idx=0; idx<rawCookies.length; idx++)
    {
      var parsedCookie = rawCookies[idx].split('=');

      if (parsedCookie[0].indexOf('mod_auth_openidc_session') == 0 ||
          parsedCookie[0].indexOf('mod_auth_openidc_state') == 0)
      {
        founded = true;
        break;
      }
    }

    if (!founded)
    {
      self.log.info(self.moduleName + " - there are no WSO2 cookies in the request!");
      callback(null, {message:"NO_COOKIES"});
    }
    else
    {
      // logout url
      var url = "http://10.10.85.168/cruscottogeospaziale/sso?logout=http://10.10.85.168/cruscotto";

      self.log.info(self.moduleName + " - there are WSO2 cookies in the request!");
      callback(null, {message:"COOKIES", url:url});
    }
  }
  else
  {
    self.log.info(self.moduleName + " - there are no cookies in the request!");
    callback(null, {message:"NO_COOKIES"});
  }

}

/*
 * Export
 */
exports.loginWSO2 = loginWSO2;
